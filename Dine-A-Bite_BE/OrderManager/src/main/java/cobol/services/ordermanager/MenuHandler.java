package cobol.services.ordermanager;


import cobol.services.ordermanager.dbmenu.*;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;


/**
 *
 * This class puts JSON menus into the database and creates JSON menus from the databse and refreshes them everytime a change is made
 * saving the menus as JSON files makes it so they dont have to be remade every call
 */
@Service
public class MenuHandler {
    private ArrayList<StandMenu> stands;// = new ArrayList<Stand>();
    private Map<String, JSONObject> standmenus;// = new HashMap<>();
    private JSONObject totalmenu;
    @Autowired // This means to get the bean called standRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private StandRepository standRepository;
    @Autowired
    private Food_Repository food_Repository;
    @Autowired
    private StockRepository stockRepository;

    public MenuHandler() {
        stands=new ArrayList<StandMenu>();
        standmenus = new HashMap<>();
    }

    /**
     * this is only necessary when there are already items in the database before starting up the menuhandler
     */
    public void update(){
        String[] s = standRepository.findStands();
        System.out.println(s.length);
        for ( int i=0;i<s.length;i++){
            boolean b=false;
            for (int j =0;j<stands.size();j++){
                if (s[i].equals(stands.get(j).getStandname())) {
                    b = true;
                }
            }
            if (!b) {
                StandMenu newstand = new StandMenu(s[i]);
                stands.add(newstand);
            }
            setStandmenu(s[i]);
            fetchStandMenu(s[i]);

        }
        fetchMenu();
    }

    /**
     *
     * @return JSONobject with standnames (TODO: and ids)
     */
    public JSONObject getStandnames(){
        JSONObject obj = new JSONObject();
        for (int i =0;i<stands.size();i++){
            obj.put(i ,stands.get(i).getStandname());
        }
        return obj;
    }

    /**
     * This function puts the data from the database into Arraylists
     * @param standname
     */
    public void setStandmenu(String standname){
        ArrayList<Food_item> menu = new ArrayList<>();
        List<Food> l = food_Repository.findByStand(standname);
        for (int i = 0;i<l.size();i++){

            Food_item f = new Food_item(l.get(i).getName(),  l.get(i).getPreptime(),l.get(i).getPrice(), l.get(i).getDescription(), l.get(i).getCategory());
            menu.add(f);
        }
        for (int i=0;i<stands.size();i++){
            if (stands.get(i).getStandname().equals(standname)) stands.get(i).setMenu(menu);
        }
    }
    public JSONObject getStandMenu(String standname){
        if (!standmenus.containsKey(standname)){
            System.out.println("Wrong name");
            return null;
        }
        return standmenus.get(standname);
    }
    public JSONObject getTotalmenu() {
        return totalmenu;
    }

    /**
     * this function makes the JSON menu for a specific stand
     * @param standname
     */
    public void fetchStandMenu(String standname){
        for (int i = 0;i<stands.size();i++){
            if (stands.get(i).getStandname().equals(standname)){
                stands.get(i).fetchMenu();
                standmenus.put(standname,stands.get(i).fetchMenu());
            }
        }

    }

    /**
     * This function creates a global menu JSON file
     */
    public void fetchMenu(){
        JSONObject obj = new JSONObject();
        for (int j = 0; j<stands.size();j++){
            for (int i = 0; i<stands.get(j).getMenu().size();i++){
                List l = new ArrayList();
                l.add(stands.get(j).getBrandname());
                l.add(stands.get(j).getMenu().get(i).getPrice());
                l.add(stands.get(j).getMenu().get(i).getCategory());
                l.add(stands.get(j).getMenu().get(i).getDescription());
                obj.put(stands.get(j).getMenu().get(i).getType(),l);

            }
        }

        this.totalmenu=obj;
    }
    /**
     * Add stand to database
     * returns "saved" if correctly added
     */

    String addStand(JSONObject menu) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestBody means it is requires a body from the POST request
        String standname = null;
        double llon = 0;
        double llat = 0;
        String brandname = null;
        Set<String> keys = menu.keySet();
        System.out.println(keys);
        for (String key : keys) {
            if (((ArrayList)menu.get(key)).size()==2){
                standname = key;
            }
        }
        ArrayList st = (ArrayList) menu.get(standname);
        brandname = (String) st.get(0);
        llon = (double) st.get(1);
        llat = (double) st.get(2);
        Stand n = new Stand();
        n.setBrandname(brandname);
        n.setFull_name(standname);
        n.setLocation_lat(llat);
        n.setLocation_lon(llon);
        standRepository.save(n);
        for (String key : keys) {
            //JSONArray a = (JSONArray)menu.get(key);
            ArrayList a = (ArrayList) menu.get(key);
            if (((ArrayList)menu.get(key)).size()==2){
                continue;
            }

            Food fp = new Food();
            fp.setName(key);
            Double d = (Double) a.get(0);
            fp.setPrice(d.floatValue());
            fp.setPreptime((int) a.get(1));
            fp.setDescription((String) a.get(4));
            fp.setCategory(Arrays.asList(new String[]{(String) a.get(3)}));
            fp.setBrandname(brandname);
            food_Repository.save(fp);
            Stock s = new Stock();
            s.setCount((int) a.get(2));
            s.setFood_id(fp.getId());
            s.setStand_id(n.getId());
            stockRepository.save(s);

        }

        boolean b=false;
        for (int j =0;j<stands.size();j++){
            if (standname.equals(stands.get(j).getStandname())) {
                b = true;
            }
        }
        if (!b) {
            StandMenu newstand = new StandMenu(standname);
            stands.add(newstand);
        }
        setStandmenu(standname);
        fetchStandMenu(standname);
        fetchMenu();

        return "Saved";
    }
}
